import api from './api';

export const updateParentProfile = async (profileData) => {
  try {
    const response = await api.put('/api/parents/profile', profileData);
    return response.data;
  } catch (error) {
    throw error;
  }
};

// L·∫•y th√¥ng tin parent profile
export const getParentProfile = async () => {
  try {
    console.log('üìã L·∫•y th√¥ng tin parent profile...');
    console.log('üîó API endpoint: /api/parents/parent-profile');
    
    const response = await api.get('/api/parents/parent-profile');
    console.log('‚úÖ Response:', response.data);
    console.log('üìä Response structure:', {
      code: response.data?.code,
      message: response.data?.message,
      result: response.data?.result
    });
    
    if (response.data && response.data.code === 1000) {
      console.log('‚úÖ API call th√†nh c√¥ng, tr·∫£ v·ªÅ data:', response.data.result);
      return response.data.result;
    } else {
      console.error('‚ùå API response kh√¥ng ƒë√∫ng format:', response.data);
      throw new Error(response.data?.message || 'Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin parent profile');
    }
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y parent profile:', error);
    
    if (error.response?.status === 400) {
      throw new Error('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra th√¥ng tin.');
    } else if (error.response?.status === 401) {
      throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    } else if (error.response?.status === 403) {
      throw new Error('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng li√™n h·ªá admin.');
    } else if (error.response?.status === 404) {
      throw new Error('API endpoint kh√¥ng t·ªìn t·∫°i. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ c·∫•u h√¨nh backend.');
    } else {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }
};

// L·∫•y danh s√°ch h·ªçc sinh c·ªßa parent
export const getParentStudents = async () => {
  try {
    console.log('Calling getParentStudents API...');
    
    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || '{}');
    const userEmail = loggedInUser.email;
    
    console.log('Current user email:', userEmail);
    
    // Th·ª≠ c√°c endpoint kh√°c nhau
    const endpoints = [
      '/api/parents/students',
      '/api/parent/students', 
      '/api/parents/children',
      '/api/parent/children',
      `/api/parents/students?email=${encodeURIComponent(userEmail)}`,
      `/api/parent/students?email=${encodeURIComponent(userEmail)}`
    ];
    
    for (const endpoint of endpoints) {
      try {
        console.log(`Trying endpoint: ${endpoint}`);
        const response = await api.get(endpoint);
        console.log(`Success with ${endpoint}:`, response);
        return response.data;
      } catch (err) {
        console.log(`Failed with ${endpoint}:`, err.response?.status);
        if (err.response?.status === 404) continue;
        throw err;
      }
    }
    
    console.log('No API endpoint found, returning empty result');
    return { result: [] };
    
    // N·∫øu t·∫•t c·∫£ ƒë·ªÅu fail, tr·∫£ v·ªÅ empty
    return { result: [] };
  } catch (error) {
    console.error('Failed to get students:', error);
    console.error('Error details:', {
      message: error.message,
      response: error.response?.data,
      status: error.response?.status
    });
    return { result: [] };
  }
};

// T√¨m ki·∫øm h·ªçc sinh theo student code
export const searchStudentByCode = async (studentCode) => {
  try {
    console.log('=== T√åM KI·∫æM H·ªåC SINH THEO CODE ===');
    console.log('Student Code:', studentCode);
    
    // Th·ª≠ c√°c endpoint kh√°c nhau ƒë·ªÉ t√¨m ki·∫øm h·ªçc sinh
    const endpoints = [
      `/api/parents/students/search?studentCode=${encodeURIComponent(studentCode)}`,
      `/api/parent/students/search?studentCode=${encodeURIComponent(studentCode)}`,
      `/api/students/search?studentCode=${encodeURIComponent(studentCode)}`,
      `/api/parents/students?studentCode=${encodeURIComponent(studentCode)}`,
      `/api/parent/students?studentCode=${encodeURIComponent(studentCode)}`
    ];
    
    for (const endpoint of endpoints) {
      try {
        console.log(`Trying search endpoint: ${endpoint}`);
        const response = await api.get(endpoint);
        console.log(`‚úÖ Success with search endpoint ${endpoint}:`, response);
        return response.data;
      } catch (err) {
        console.log(`‚ùå Failed with search endpoint ${endpoint}:`, err.response?.status);
        if (err.response?.status === 404) continue;
        throw err;
      }
    }
    
    throw new Error('Kh√¥ng t√¨m th·∫•y h·ªçc sinh v·ªõi m√£ s·ªë n√†y');
  } catch (error) {
    console.error('‚ùå Error searching student by code:', error);
    throw error;
  }
};

// G·ª≠i y√™u c·∫ßu thu·ªëc (c·∫≠p nh·∫≠t ƒë·ªÉ h·ªó tr·ª£ student code)
export const sendMedicalRequest = async (medicalRequestData) => {
  try {
    console.log('=== G·ª¨I Y√äU C·∫¶U THU·ªêC ===');
    console.log('Data being sent:', JSON.stringify(medicalRequestData, null, 2));
    console.log('Student ID:', medicalRequestData.studentId);
    console.log('Student Code:', medicalRequestData.studentCode);
    
         // S·ª≠ d·ª•ng d·ªØ li·ªáu g·ªëc, kh√¥ng t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi
     let requestData = { ...medicalRequestData };
     
     // Log ƒë·ªÉ debug
            console.log('üìã StudentId (using UUID):', {
         studentId: medicalRequestData.studentId,
         studentCode: medicalRequestData.studentCode,
         isUUID: /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(medicalRequestData.studentId),
         type: typeof medicalRequestData.studentId
       });
    
    console.log('Final request data:', JSON.stringify(requestData, null, 2));
    
    // Th·ª≠ c√°c endpoint kh√°c nhau
    const endpoints = [
      '/api/parents/medical-request',
      '/api/parent/medical-request'
    ];
    
    for (const endpoint of endpoints) {
      try {
        console.log(`Trying endpoint: ${endpoint}`);
        const response = await api.post(endpoint, requestData);
        console.log(`‚úÖ Success with ${endpoint}:`, response);
        return response.data;
      } catch (err) {
        console.log(`‚ùå Failed with ${endpoint}:`, err.response?.status);
        console.log('Error details:', err.response?.data);
        if (err.response?.status === 404) continue;
        throw err;
      }
    }
    
    throw new Error('No valid endpoint found');
  } catch (error) {
    console.error('‚ùå Error sending medical request:', error);
    throw error;
  }
};

// L·∫•y l·ªãch u·ªëng thu·ªëc c·ªßa con
export const getSchedulesForParent = async () => {
  try {
    const response = await api.get('/api/parents/schedules');
    return response.data;
  } catch (error) {
    console.error('Error getting schedules:', error);
    throw error;
  }
};

// L·∫•y d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ b·∫£ng parents_students
export const getParentStudentsFromDB = async () => {
  try {
    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || '{}');
    const userEmail = loggedInUser.email;
    
    console.log('Getting students from DB for email:', userEmail);
    
    // Th·ª≠ c√°c endpoint kh√°c nhau ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng parents_students
    const endpoints = [
      `/api/parents/students-by-email?email=${encodeURIComponent(userEmail)}`,
      `/api/parent/students-by-email?email=${encodeURIComponent(userEmail)}`,
      `/api/parents/students?email=${encodeURIComponent(userEmail)}`,
      `/api/parent/students?email=${encodeURIComponent(userEmail)}`,
      `/api/parents/children?email=${encodeURIComponent(userEmail)}`,
      `/api/parent/children?email=${encodeURIComponent(userEmail)}`,
      `/api/parents/students`,
      `/api/parent/students`
    ];
    
    for (const endpoint of endpoints) {
      try {
        console.log(`Trying DB endpoint: ${endpoint}`);
        const response = await api.get(endpoint);
        console.log(`Success with DB endpoint ${endpoint}:`, response);
        return response.data;
      } catch (err) {
        console.log(`Failed with DB endpoint ${endpoint}:`, err.response?.status);
        if (err.response?.status === 404) continue;
        throw err;
      }
    }
    
    console.log('All DB endpoints failed');
    throw new Error('No valid endpoint found');
    
    throw new Error('No valid endpoint found and no mock data available');
  } catch (error) {
    console.error('Error getting students from DB:', error);
    throw error;
  }
}; 

// L·∫•y danh s√°ch thu·ªëc ph·ª• huynh ƒë√£ g·ª≠i
export const getParentMedicalRequests = async () => {
  try {
    console.log('=== L·∫§Y DANH S√ÅCH THU·ªêC PH·ª§ HUYNH ƒê√É G·ª¨I ===');
    
    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || '{}');
    const userEmail = loggedInUser.email;
    
    console.log('Current user email:', userEmail);
    
    // Th·ª≠ c√°c endpoint kh√°c nhau
    const endpoints = [
      '/api/parents/medical-requests',
      '/api/parent/medical-requests',
      `/api/parents/medical-requests?email=${encodeURIComponent(userEmail)}`,
      `/api/parent/medical-requests?email=${encodeURIComponent(userEmail)}`,
      '/api/parents/medicine-requests',
      '/api/parent/medicine-requests',
      `/api/parents/medicine-requests?email=${encodeURIComponent(userEmail)}`,
      `/api/parent/medicine-requests?email=${encodeURIComponent(userEmail)}`
    ];
    
    for (const endpoint of endpoints) {
      try {
        console.log(`Trying endpoint: ${endpoint}`);
        const response = await api.get(endpoint);
        console.log(`‚úÖ Success with ${endpoint}:`, response);
        return response.data;
      } catch (err) {
        console.log(`‚ùå Failed with ${endpoint}:`, err.response?.status);
        if (err.response?.status === 404) continue;
        throw err;
      }
    }
    
    console.log('No API endpoint found, returning empty result');
    return { result: [] };
  } catch (error) {
    console.error('‚ùå Error getting medical requests:', error);
    return { result: [] };
  }
}; 