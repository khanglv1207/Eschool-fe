import React, { useState, useEffect } from 'react';
import { FaStethoscope, FaCheck, FaTimes, FaCalendar, FaMapMarkerAlt, FaInfoCircle } from 'react-icons/fa';
import { getHealthCheckupNotifications, confirmHealthCheckup } from '../services/healthCheckupApi';
import './HealthCheckupNotifications.css';

const HealthCheckupNotifications = () => {
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState('');
  const [processingId, setProcessingId] = useState(null);

  useEffect(() => {
    loadNotifications();
  }, []);

  const loadNotifications = async () => {
    try {
      setLoading(true);
      console.log('üìã L·∫•y danh s√°ch th√¥ng b√°o ki·ªÉm tra y t·∫ø cho ph·ª• huynh...');
      
      const response = await getHealthCheckupNotifications();
      console.log('üìã Health checkup notifications loaded:', response);
      
      setNotifications(response);
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y danh s√°ch th√¥ng b√°o:', error);
      setMessage('‚ùå L·ªói t·∫£i th√¥ng b√°o: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const generateUUID = () => {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  };

      const handleConfirm = async (notification, parentNote = 'Ph·ª• huynh x√°c nh·∫≠n ki·ªÉm tra y t·∫ø') => {
    try {
      setProcessingId(`notification-${notification.id || 'temp'}`);
      setMessage('');
      
      // Chuy·ªÉn ƒë·ªïi confirmationId th√†nh UUID format n·∫øu c·∫ßn
      let confirmationId = notification.id || generateUUID();
      
      // ƒê·∫£m b·∫£o confirmationId l√† UUID format h·ª£p l·ªá
      if (typeof confirmationId === 'string' && confirmationId.includes('-')) {
        // ƒê√£ l√† UUID format
        confirmationId = confirmationId;
      } else {
        // Chuy·ªÉn ƒë·ªïi th√†nh UUID format
        confirmationId = generateUUID();
      }

      const confirmationData = {
        confirmationId: confirmationId, // S·ª≠ d·ª•ng ID th·∫≠t t·ª´ notification n·∫øu c√≥
        status: 'ACCEPTED', // Backend y√™u c·∫ßu ACCEPTED thay v√¨ CONFIRMED
        parentNote: parentNote
      };

      console.log('‚úÖ Sending confirmation data:', confirmationData);
      console.log('‚úÖ ConfirmationId type:', typeof confirmationId);
      console.log('‚úÖ ConfirmationId value:', confirmationId);

      const response = await confirmHealthCheckup(confirmationData);

      console.log('‚úÖ Confirmation response:', response);

      setMessage('‚úÖ X√°c nh·∫≠n ki·ªÉm tra y t·∫ø th√†nh c√¥ng!');

      // Reload notifications after successful confirmation
      setTimeout(() => {
        loadNotifications();
        setMessage('');
      }, 2000);

    } catch (error) {
      console.error('‚ùå L·ªói x√°c nh·∫≠n ki·ªÉm tra y t·∫ø:', error);
      setMessage('‚ùå L·ªói x√°c nh·∫≠n: ' + error.message);
    } finally {
      setProcessingId(null);
    }
  };

      const handleReject = async (notification, parentNote = 'Ph·ª• huynh t·ª´ ch·ªëi ki·ªÉm tra y t·∫ø') => {
    try {
      setProcessingId(`notification-${notification.id || 'temp'}`);
      setMessage('');
      
      // Chuy·ªÉn ƒë·ªïi confirmationId th√†nh UUID format n·∫øu c·∫ßn
      let confirmationId = notification.id || generateUUID();
      
      // ƒê·∫£m b·∫£o confirmationId l√† UUID format h·ª£p l·ªá
      if (typeof confirmationId === 'string' && confirmationId.includes('-')) {
        // ƒê√£ l√† UUID format
        confirmationId = confirmationId;
      } else {
        // Chuy·ªÉn ƒë·ªïi th√†nh UUID format
        confirmationId = generateUUID();
      }

      const rejectionData = {
        confirmationId: confirmationId, // S·ª≠ d·ª•ng ID th·∫≠t t·ª´ notification n·∫øu c√≥
        status: 'DECLINED', // Backend y√™u c·∫ßu DECLINED thay v√¨ REJECTED
        parentNote: parentNote
      };

      console.log('‚ùå Sending rejection data:', rejectionData);
      console.log('‚ùå ConfirmationId type:', typeof confirmationId);
      console.log('‚ùå ConfirmationId value:', confirmationId);

      const response = await confirmHealthCheckup(rejectionData);

      console.log('‚úÖ Rejection response:', response);

      setMessage('‚úÖ ƒê√£ t·ª´ ch·ªëi ki·ªÉm tra y t·∫ø th√†nh c√¥ng!');

      // Reload notifications after successful rejection
      setTimeout(() => {
        loadNotifications();
        setMessage('');
      }, 2000);

    } catch (error) {
      console.error('‚ùå L·ªói t·ª´ ch·ªëi ki·ªÉm tra y t·∫ø:', error);
      setMessage('‚ùå L·ªói t·ª´ ch·ªëi: ' + error.message);
    } finally {
      setProcessingId(null);
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="health-checkup-notifications">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>ƒêang t·∫£i th√¥ng b√°o ki·ªÉm tra y t·∫ø...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="health-checkup-notifications">
      <div className="notifications-header">
        <h1><FaStethoscope /> Th√¥ng B√°o Ki·ªÉm Tra Y T·∫ø</h1>
        <p>Danh s√°ch th√¥ng b√°o ki·ªÉm tra y t·∫ø ƒë·ªãnh k·ª≥ cho con em c·ªßa b·∫°n</p>
      </div>

      {message && (
        <div className={`message ${message.includes('‚ùå') ? 'error' : 'success'}`}>
          {message}
        </div>
      )}

      <div className="notifications-stats">
        <div className="stat-card">
          <div className="stat-number">{notifications.length}</div>
          <div className="stat-label">T·ªïng th√¥ng b√°o</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">
            {notifications.filter(n => n.status === 'PENDING').length}
          </div>
          <div className="stat-label">Ch·ªù x√°c nh·∫≠n</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">
            {notifications.filter(n => n.status === 'CONFIRMED').length}
          </div>
          <div className="stat-label">ƒê√£ x√°c nh·∫≠n</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">
            {notifications.filter(n => n.status === 'REJECTED').length}
          </div>
          <div className="stat-label">ƒê√£ t·ª´ ch·ªëi</div>
        </div>
      </div>

      <div className="notifications-actions">
        <button onClick={loadNotifications} className="btn-refresh">
          <FaInfoCircle /> L√†m M·ªõi Danh S√°ch
        </button>
      </div>

      {notifications.length > 0 ? (
        <div className="notifications-list">
          {notifications.map((notification, index) => (
            <div key={index} className="notification-card">
              <div className="notification-header">
                <div className="notification-type">
                  <FaStethoscope />
                  <span>{notification.checkupType || 'Ki·ªÉm tra y t·∫ø ƒë·ªãnh k·ª≥'}</span>
                </div>
                <div className="notification-status">
                  <span className={`status ${notification.status?.toLowerCase() || 'pending'}`}>
                    {notification.status === 'PENDING' ? 'Ch·ªù x√°c nh·∫≠n' :
                     notification.status === 'CONFIRMED' ? 'ƒê√£ x√°c nh·∫≠n' :
                     notification.status === 'REJECTED' ? 'ƒê√£ t·ª´ ch·ªëi' : 'Ch·ªù x√°c nh·∫≠n'}
                  </span>
                </div>
              </div>

              <div className="notification-content">
                <div className="notification-info">
                  <div className="info-item">
                    <FaCalendar />
                    <span>Ng√†y d·ª± ki·∫øn: {notification.scheduledDate ? formatDate(notification.scheduledDate) : 'Ch∆∞a l√™n l·ªãch'}</span>
                  </div>
                  <div className="info-item">
                    <FaMapMarkerAlt />
                    <span>ƒê·ªãa ƒëi·ªÉm: {notification.location || 'Ph√≤ng y t·∫ø tr∆∞·ªùng h·ªçc'}</span>
                  </div>
                  {notification.note && (
                    <div className="info-item">
                      <FaInfoCircle />
                      <span>Ghi ch√∫: {notification.note}</span>
                    </div>
                  )}
                </div>

                {(!notification.status || notification.status === 'PENDING') && (
                  <div className="notification-actions">
                    <button
                      onClick={() => handleConfirm(notification)}
                      className="btn-confirm"
                      disabled={processingId === `notification-${notification.id || 'temp'}`}
                    >
                      <FaCheck />
                      {processingId === `notification-${notification.id || 'temp'}` ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c Nh·∫≠n'}
                    </button>
                    <button
                      onClick={() => handleReject(notification)}
                      className="btn-reject"
                      disabled={processingId === `notification-${notification.id || 'temp'}`}
                    >
                      <FaTimes />
                      {processingId === `notification-${notification.id || 'temp'}` ? 'ƒêang x·ª≠ l√Ω...' : 'T·ª´ Ch·ªëi'}
                    </button>
                  </div>
                )}

                {(notification.status === 'CONFIRMED' || notification.status === 'REJECTED') && (
                  <div className="notification-result">
                    <div className={`result-badge ${notification.status.toLowerCase()}`}>
                      {notification.status === 'CONFIRMED' ? '‚úÖ ƒê√£ x√°c nh·∫≠n' : '‚ùå ƒê√£ t·ª´ ch·ªëi'}
                    </div>
                    {notification.parentNote && (
                      <div className="result-note">
                        <strong>Ghi ch√∫:</strong> {notification.parentNote}
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="no-notifications">
          <div className="no-notifications-icon">
            <FaStethoscope />
          </div>
          <h3>Ch∆∞a c√≥ th√¥ng b√°o ki·ªÉm tra y t·∫ø</h3>
          <p>Hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng b√°o ki·ªÉm tra y t·∫ø n√†o d√†nh cho con em c·ªßa b·∫°n.</p>
          <button onClick={loadNotifications} className="btn-refresh">
            <FaInfoCircle /> L√†m M·ªõi
          </button>
        </div>
      )}
    </div>
  );
};

export default HealthCheckupNotifications; 