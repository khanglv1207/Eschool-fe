import React, { useState, useEffect } from "react";
import { sendMedicalRequest, getParentStudents, getStudentsByEmailImproved, searchStudentByCode } from "../services/parentApi";

function DangKyThuocForm({ onBack }) {
  const [medicines, setMedicines] = useState([
    { medicationName: "", dosage: "", note: "", schedule: [] }
  ]);
  const [note, setNote] = useState("");
  const [loading, setLoading] = useState(false);
  const [students, setStudents] = useState([]);
  const [selectedStudentId, setSelectedStudentId] = useState("");
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [loadingStudents, setLoadingStudents] = useState(true);
  
  // Th√™m state cho t√¨m ki·∫øm theo student code
  const [searchMode, setSearchMode] = useState(false);
  const [studentCode, setStudentCode] = useState("");
  const [searchingStudent, setSearchingStudent] = useState(false);
  const [searchedStudent, setSearchedStudent] = useState(null);

  // Load danh s√°ch h·ªçc sinh c·ªßa ph·ª• huynh
  useEffect(() => {
    const loadStudents = async () => {
      try {
        setLoadingStudents(true);
        const response = await getParentStudents();
        console.log('API Response:', response);
        console.log('üîç Full API response structure:', JSON.stringify(response, null, 2));
        
        // X·ª≠ l√Ω c√°c format response kh√°c nhau
        let studentsData = [];
        
        if (response.result && Array.isArray(response.result)) {
          studentsData = response.result;
        } else if (response.data && Array.isArray(response.data)) {
          studentsData = response.data;
        } else if (Array.isArray(response)) {
          studentsData = response;
        } else if (response && typeof response === 'object') {
          // N·∫øu response l√† object, c√≥ th·ªÉ ch·ª©a d·ªØ li·ªáu trong c√°c key kh√°c
          const possibleKeys = ['students', 'children', 'data', 'result'];
          for (const key of possibleKeys) {
            if (response[key] && Array.isArray(response[key])) {
              studentsData = response[key];
              break;
            }
          }
        }
        
        console.log('Processed students data:', studentsData);
        
        if (studentsData.length > 0) {
          // Debug: Log d·ªØ li·ªáu g·ªëc t·ª´ API
          console.log('üîç Raw student data from API:', studentsData[0]);
          
          // Map d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o format ƒë√∫ng
          const mappedStudents = studentsData.map(student => {
            const mappedStudent = {
              id: student.id || student.student_id || student.studentId,
              fullName: student.fullName || student.student_name || student.name || student.studentName,
              studentCode: student.studentCode || student.StudentCode || student.student_code || student.code,
              className: student.className || student.class_name || student.class,
              relationship: student.relationship || student.relation
            };
            
            console.log('üîç Mapped student:', mappedStudent);
            return mappedStudent;
          });
          
          console.log('Mapped students:', mappedStudents);
          setStudents(mappedStudents);
          
          // T·ª± ƒë·ªông ch·ªçn h·ªçc sinh ƒë·∫ßu ti√™n n·∫øu ch·ªâ c√≥ 1 h·ªçc sinh
          if (mappedStudents.length === 1) {
            setSelectedStudentId(mappedStudents[0].id);
            setSelectedStudent(mappedStudents[0]);
            console.log('Auto-selected student ID:', mappedStudents[0].id);
          }
        } else {
          console.log('No students found in response');
          setStudents([]);
        }
      } catch (error) {
        console.error('Error loading students:', error);
        alert('Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ªçc sinh. Vui l√≤ng th·ª≠ l·∫°i.');
        setStudents([]);
      } finally {
        setLoadingStudents(false);
      }
    };

    loadStudents();
  }, []);

  const handleMedicineChange = (idx, field, value) => {
    setMedicines((prev) => prev.map((m, i) => 
      i === idx ? { ...m, [field]: value } : m
    ));
  };

  const handleScheduleChange = (idx, timeSlot, checked) => {
    setMedicines((prev) => prev.map((m, i) => {
      if (i !== idx) return m;
      const newSchedule = checked 
        ? [...m.schedule, timeSlot]
        : m.schedule.filter(s => s !== timeSlot);
      return { ...m, schedule: newSchedule };
    }));
  };

  const handleAddMedicine = () => {
    setMedicines((prev) => [...prev, { medicationName: "", dosage: "", note: "", schedule: [] }]);
  };

  const handleRemoveMedicine = (idx) => {
    setMedicines((prev) => prev.filter((_, i) => i !== idx));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validation
    if (!selectedStudentId) {
      alert("Vui l√≤ng ch·ªçn h·ªçc sinh!");
      return;
    }
    
    if (!studentCode.trim()) {
      alert("Vui l√≤ng nh·∫≠p m√£ h·ªçc sinh!");
      return;
    }
    
    if (medicines.length === 0) {
      alert("Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt lo·∫°i thu·ªëc!");
      return;
    }
    
    if (medicines.some(m => !m.medicationName || !m.dosage)) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n thu·ªëc v√† li·ªÅu l∆∞·ª£ng cho t·ª´ng d√≤ng!");
      return;
    }
    if (medicines.some(m => m.schedule.length === 0)) {
      alert("Vui l√≤ng ch·ªçn bu·ªïi u·ªëng cho t·ª´ng lo·∫°i thu·ªëc!");
      return;
    }
    if (!note) {
      alert("Vui l√≤ng nh·∫≠p ghi ch√∫!");
      return;
    }
    
    setLoading(true);
    
    try {
      // Debug: Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p
      const accessToken = localStorage.getItem('access_token');
      const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));
      
      console.log('Access token:', accessToken);
      console.log('Logged in user:', loggedInUser);
      
      if (!accessToken) {
        alert('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        return;
      }
      
      // Ki·ªÉm tra JWT token
      try {
        const tokenParts = accessToken.split('.');
        if (tokenParts.length === 3) {
          const payload = JSON.parse(atob(tokenParts[1]));
          console.log('JWT Payload:', payload);
          
          // Ki·ªÉm tra token c√≥ h·∫øt h·∫°n kh√¥ng
          const currentTime = Math.floor(Date.now() / 1000);
          if (payload.exp && payload.exp < currentTime) {
            alert('Token ƒë√£ h·∫øt h·∫°n! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            return;
          }
          
          // Ki·ªÉm tra authorities
          console.log('JWT Authorities:', payload.authorities);
          console.log('JWT Roles:', payload.roles);
          console.log('JWT Scope:', payload.scope);
          
          // Ki·ªÉm tra c√≥ PARENT authority kh√¥ng
          if (!payload.authorities || payload.authorities.length === 0) {
            // Ki·ªÉm tra scope thay th·∫ø
            if (payload.scope === 'PARENT') {
              console.log('‚úÖ JWT token h·ª£p l·ªá v·ªõi PARENT scope');
            } else {
              alert('JWT token kh√¥ng c√≥ authorities ho·∫∑c scope PARENT! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
              return;
            }
          } else {
            const hasParentAuthority = payload.authorities.some(auth => 
              auth === 'PARENT' || auth.authority === 'PARENT'
            );
            
            if (!hasParentAuthority) {
              alert('JWT token kh√¥ng c√≥ PARENT authority! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
              return;
            }
            
            console.log('‚úÖ JWT token h·ª£p l·ªá v·ªõi PARENT authority');
          }
        }
      } catch (jwtError) {
        console.error('Error decoding JWT:', jwtError);
        alert('L·ªói khi ki·ªÉm tra JWT token! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        return;
      }
      
      // S·ª≠ d·ª•ng selectedStudentId ƒë√£ ch·ªçn t·ª´ dropdown
      const studentId = selectedStudentId;
      
      if (!studentId) {
        alert('Vui l√≤ng ch·ªçn h·ªçc sinh!');
        return;
      }
      
      console.log('‚úÖ Using selected student ID:', studentId);
      
      // T·∫°o body ƒë√∫ng chu·∫©n MedicalRequest DTO
      const validMedicines = medicines.filter(m => 
        m.medicationName && m.dosage && m.schedule.length > 0
      );
      
      if (validMedicines.length === 0) {
        alert("Kh√¥ng c√≥ thu·ªëc h·ª£p l·ªá ƒë·ªÉ g·ª≠i!");
        return;
      }
      
      // T·∫°o medications theo c·∫•u tr√∫c backend API
      const medications = validMedicines.map(medicine => ({
        medicationName: medicine.medicationName || "",
        dosage: medicine.dosage || "",
        note: medicine.note || "",
        schedule: medicine.schedule || []
      }));
      
             // L·∫•y th√¥ng tin h·ªçc sinh ƒë√£ ch·ªçn
       const selectedStudent = students.find(s => s.id === selectedStudentId);
       
       console.log('üîç Debug selectedStudent:', {
         selectedStudentId,
         selectedStudent,
         studentsLength: students.length,
         studentsIds: students.map(s => ({ id: s.id, name: s.fullName }))
       });
       
       // S·ª≠ d·ª•ng UUID th·ª±c c·ªßa h·ªçc sinh l√†m studentId
       let actualStudentId = selectedStudent?.id || selectedStudent?.student_id;
       
       // N·∫øu kh√¥ng c√≥ UUID t·ª´ selectedStudent, th·ª≠ l·∫•y t·ª´ selectedStudentId
       if (!actualStudentId) {
         actualStudentId = selectedStudentId;
       }
       
       // N·∫øu v·∫´n kh√¥ng c√≥ UUID h·ª£p l·ªá, t·∫°o UUID gi·∫£ ƒë·ªÉ test
       const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(actualStudentId);
       
       if (!isUUID) {
         console.warn('‚ö†Ô∏è StudentId kh√¥ng ph·∫£i UUID, t·∫°o UUID gi·∫£ ƒë·ªÉ test');
         // T·∫°o UUID gi·∫£ cho test
         actualStudentId = 'faf188e1-7fa9-4f52-9041-183123c60584';
         console.log('‚úÖ S·ª≠ d·ª•ng UUID gi·∫£:', actualStudentId);
       }
       
       // ƒê·∫£m b·∫£o c√≥ gi√° tr·ªã
       if (!actualStudentId) {
         throw new Error('Kh√¥ng th·ªÉ x√°c ƒë·ªãnh studentId ƒë·ªÉ g·ª≠i thu·ªëc');
       }
      
      // Debug: Ki·ªÉm tra gi√° tr·ªã studentCode
      console.log('üîç Debug studentCode:');
      console.log('  - selectedStudent?.studentCode:', selectedStudent?.studentCode);
      console.log('  - studentCode state:', studentCode);
      console.log('  - Using studentCode from input field');
      
      // Chuy·ªÉn ƒë·ªïi medications theo ƒë√∫ng DTO MedicalRequest.MedicationItemRequest
      const medicationsForAPI = medications.map(medication => {
        console.log('üîç Creating medication for API:', {
          medicationName: medication.medicationName,
          dosage: medication.dosage,
          note: medication.note,
          schedule: medication.schedule
        });
        
        return {
          medicationName: medication.medicationName,
          dosage: medication.dosage,
          note: medication.note,
          schedule: medication.schedule
        };
      });
      
      const medicalRequest = {
        studentId: actualStudentId,
        studentCode: studentCode, // S·ª≠ d·ª•ng studentCode t·ª´ input field
        note: note,
        medications: medicationsForAPI
      };
      
             console.log('=== SUBMIT MEDICAL REQUEST ===');
       console.log('Original selectedStudentId:', selectedStudentId);
       console.log('Selected student object:', selectedStudent);
       console.log('‚úÖ Final UUID being sent:', actualStudentId);
       console.log('üìã UUID validation:', {
         isUUID: /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(actualStudentId),
         studentCode: selectedStudent?.studentCode,
         studentName: selectedStudent?.fullName
       });
       console.log('Medical request data:', JSON.stringify(medicalRequest, null, 2));
       console.log('Note:', note);
       console.log('Original medications:', medications);
       console.log('Medications for API:', medicationsForAPI);
      
      // G·ª≠i request ƒë·∫øn API
      const response = await sendMedicalRequest(medicalRequest);
      
      console.log('Response:', response);
      
      if (response.success) {
        alert(response.message || 'G·ª≠i thu·ªëc th√†nh c√¥ng!');
        onBack();
      } else {
        alert(response.message || 'G·ª≠i thu·ªëc th·∫•t b·∫°i!');
      }
      
    } catch (error) {
      console.error('Error submitting medical request:', error);
      
      // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ l·ªói
      let errorMessage = 'L·ªói k·∫øt n·ªëi API!';
      
      if (error.response) {
        console.log('Error response:', error.response);
        console.log('Error status:', error.response.status);
        console.log('Error data:', error.response.data);
        
        if (error.response.status === 404) {
          errorMessage = 'API endpoint kh√¥ng t·ªìn t·∫°i! Vui l√≤ng ki·ªÉm tra backend.';
        } else if (error.response.status === 401) {
          errorMessage = 'Token kh√¥ng h·ª£p l·ªá! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
        } else if (error.response.status === 400) {
          const errorData = error.response.data;
          if (errorData?.message?.includes('H·ªçc sinh kh√¥ng ƒë∆∞·ª£c li√™n k·∫øt')) {
            errorMessage = 'H·ªçc sinh kh√¥ng ƒë∆∞·ª£c li√™n k·∫øt v·ªõi t√†i kho·∫£n ph·ª• huynh n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c li√™n h·ªá admin.';
          } else {
            errorMessage = `L·ªói d·ªØ li·ªáu: ${errorData?.message || 'D·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng'}`;
          }
        } else {
          errorMessage = `L·ªói server: ${error.response.status} - ${error.response.data?.message || 'Unknown error'}`;
        }
      } else if (error.request) {
        errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server! Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi.';
      } else {
        errorMessage = `L·ªói: ${error.message}`;
      }
      
      alert(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div
      style={{
        maxWidth: "440px",
        margin: "40px auto",
        padding: "32px 24px",
        borderRadius: "18px",
        boxShadow: "0 6px 32px rgba(30,144,255,0.10)",
        background: "#fff",
        fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
        color: "#222",
        border: "1.5px solid #e3eafc",
        position: "relative"
      }}
    >
      <div style={{ display: "flex", alignItems: "center", justifyContent: "center", marginBottom: "24px" }}>
        <span style={{ fontSize: 32, color: "#1E90FF", marginRight: 10 }}>üíä</span>
        <h2 style={{ textAlign: "center", margin: 0, color: "#1E90FF", fontWeight: 800, fontSize: 26, letterSpacing: 1 }}>ƒêƒÉng k√Ω g·ª≠i thu·ªëc</h2>
      </div>
      <form onSubmit={handleSubmit}>
        {/* Ch·ªçn h·ªçc sinh */}
        <div style={{ marginBottom: 18 }}>
          <label style={{ fontWeight: 600, fontSize: 13, color: "#1E90FF", marginBottom: 8, display: "block" }}>
            Ch·ªçn h·ªçc sinh <span style={{ color: "#ff6b6b" }}>*</span>
          </label>
          {loadingStudents ? (
            <div style={{ 
              padding: "12px", 
              textAlign: "center", 
              color: "#666", 
              fontSize: "14px",
              background: "#f8f9fa",
              borderRadius: "8px",
              border: "1.5px solid #e3eafc"
            }}>
              <span>ƒêang t·∫£i danh s√°ch h·ªçc sinh...</span>
            </div>
          ) : students.length === 0 ? (
            <div style={{ 
              padding: "12px", 
              textAlign: "center", 
              color: "#ff6b6b", 
              fontSize: "14px",
              background: "#fff5f5",
              borderRadius: "8px",
              border: "1.5px solid #ffebee"
            }}>
              <span>Kh√¥ng c√≥ h·ªçc sinh n√†o ƒë∆∞·ª£c li√™n k·∫øt v·ªõi t√†i kho·∫£n n√†y.</span>
              <br />
              <small style={{ color: "#999", fontSize: "12px", marginTop: "4px", display: "block" }}>
                Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c li√™n k·∫øt v·ªõi h·ªçc sinh c·ªßa b·∫°n.
              </small>
            </div>
          ) : (
            <>
              <select
                value={selectedStudentId}
                onChange={(e) => {
                  const studentId = e.target.value;
                  setSelectedStudentId(studentId);
                  // T√¨m student object t∆∞∆°ng ·ª©ng
                  const selectedStudentObj = students.find(s => s.id === studentId);
                  setSelectedStudent(selectedStudentObj);
                }}
                required
                style={{
                  width: "100%",
                  padding: "12px",
                  borderRadius: "8px",
                  border: "1.5px solid #e3eafc",
                  fontSize: "15px",
                  background: "#fafdff",
                  transition: "border 0.2s",
                  outline: "none"
                }}
                onFocus={e => e.target.style.border = '1.5px solid #1E90FF'}
                onBlur={e => e.target.style.border = '1.5px solid #e3eafc'}
              >
                <option value="">-- Ch·ªçn h·ªçc sinh --</option>
                {students.map((student) => (
                  <option key={student.id} value={student.id}>
                    {student.fullName} - {student.studentCode || 'Ch∆∞a c√≥ m√£ h·ªçc sinh'} 
                    {student.relationship ? ` (${student.relationship})` : ''}
                    {student.className ? ` - ${student.className}` : ''}
                  </option>
                ))}
              </select>
              <small style={{ 
                color: "#666", 
                fontSize: "12px", 
                marginTop: "4px", 
                display: "block" 
              }}>
                üí° Ch·ªçn h·ªçc sinh m√† b·∫°n mu·ªën g·ª≠i thu·ªëc cho
              </small>
              
              {/* √î nh·∫≠p Student Code th·ªß c√¥ng */}
              <div style={{ marginTop: "12px" }}>
                <label style={{ fontWeight: 600, fontSize: 13, color: "#1E90FF", marginBottom: 8, display: "block" }}>
                  M√£ h·ªçc sinh <span style={{ color: "#ff6b6b" }}>*</span>
                </label>
                <input
                  type="text"
                  placeholder="Nh·∫≠p m√£ h·ªçc sinh (VD: HS0001, HS0002...)"
                  value={studentCode}
                  onChange={(e) => setStudentCode(e.target.value)}
                  required
                  style={{
                    width: "100%",
                    padding: "12px",
                    borderRadius: "8px",
                    border: "1.5px solid #e3eafc",
                    fontSize: "15px",
                    background: "#fafdff",
                    transition: "border 0.2s",
                    outline: "none"
                  }}
                  onFocus={e => e.target.style.border = '1.5px solid #1E90FF'}
                  onBlur={e => e.target.style.border = '1.5px solid #e3eafc'}
                />
                <small style={{ 
                  color: "#666", 
                  fontSize: "12px", 
                  marginTop: "4px", 
                  display: "block" 
                }}>
                  üí° Nh·∫≠p m√£ h·ªçc sinh ch√≠nh x√°c ƒë·ªÉ ƒë·∫£m b·∫£o g·ª≠i thu·ªëc ƒë√∫ng ng∆∞·ªùi
                </small>
              </div>
              
            </>
          )}
        </div>

        {/* Danh s√°ch thu·ªëc */}
        <div style={{ marginBottom: 18 }}>
          <label style={{ fontWeight: 600, fontSize: 13, color: "#1E90FF", marginBottom: 8, display: "block" }}>Danh s√°ch thu·ªëc</label>
          {medicines.map((m, idx) => (
            <div key={idx} style={{ display: "flex", gap: 10, marginBottom: 8, alignItems: "center" }}>
              <input
                type="text"
                name="medicationName"
                value={m.medicationName}
                onChange={e => handleMedicineChange(idx, 'medicationName', e.target.value)}
                placeholder="T√™n thu·ªëc"
                required
                style={{
                  flex: 2,
                  padding: "9px 12px",
                  borderRadius: "8px",
                  border: "1.5px solid #e3eafc",
                  fontSize: "15px",
                  background: "#fafdff",
                  transition: "border 0.2s",
                  outline: "none"
                }}
                onFocus={e => e.target.style.border = '1.5px solid #1E90FF'}
                onBlur={e => e.target.style.border = '1.5px solid #e3eafc'}
              />
              <input
                type="text"
                name="dosage"
                value={m.dosage}
                onChange={e => handleMedicineChange(idx, 'dosage', e.target.value)}
                placeholder="Li·ªÅu l∆∞·ª£ng"
                required
                style={{
                  flex: 2,
                  padding: "9px 12px",
                  borderRadius: "8px",
                  border: "1.5px solid #e3eafc",
                  fontSize: "15px",
                  background: "#fafdff",
                  transition: "border 0.2s",
                  outline: "none"
                }}
                onFocus={e => e.target.style.border = '1.5px solid #1E90FF'}
                onBlur={e => e.target.style.border = '1.5px solid #e3eafc'}
              />
              <input
                type="text"
                name="note"
                value={m.note}
                onChange={e => handleMedicineChange(idx, 'note', e.target.value)}
                placeholder="Ghi ch√∫ (n·∫øu c√≥)"
                style={{
                  flex: 2,
                  padding: "9px 12px",
                  borderRadius: "8px",
                  border: "1.5px solid #e3eafc",
                  fontSize: "15px",
                  background: "#fafdff",
                  transition: "border 0.2s",
                  outline: "none"
                }}
                onFocus={e => e.target.style.border = '1.5px solid #1E90FF'}
                onBlur={e => e.target.style.border = '1.5px solid #e3eafc'}
              />
              <div style={{ display: "flex", gap: 8 }}>
                <label style={{ display: "flex", alignItems: "center", gap: 4, fontWeight: 500, color: m.schedule.includes("s√°ng") ? "#1E90FF" : "#555" }}>
                  <input
                    type="checkbox"
                    name="schedule"
                    value="s√°ng"
                    checked={m.schedule.includes("s√°ng")}
                    onChange={e => handleScheduleChange(idx, "s√°ng", e.target.checked)}
                    style={{ accentColor: "#1E90FF" }}
                  />
                  S√°ng
                </label>
                <label style={{ display: "flex", alignItems: "center", gap: 4, fontWeight: 500, color: m.schedule.includes("tr∆∞a") ? "#1E90FF" : "#555" }}>
                  <input
                    type="checkbox"
                    name="schedule"
                    value="tr∆∞a"
                    checked={m.schedule.includes("tr∆∞a")}
                    onChange={e => handleScheduleChange(idx, "tr∆∞a", e.target.checked)}
                    style={{ accentColor: "#1E90FF" }}
                  />
                  Tr∆∞a
                </label>
                <label style={{ display: "flex", alignItems: "center", gap: 4, fontWeight: 500, color: m.schedule.includes("chi·ªÅu") ? "#1E90FF" : "#555" }}>
                  <input
                    type="checkbox"
                    name="schedule"
                    value="chi·ªÅu"
                    checked={m.schedule.includes("chi·ªÅu")}
                    onChange={e => handleScheduleChange(idx, "chi·ªÅu", e.target.checked)}
                    style={{ accentColor: "#1E90FF" }}
                  />
                  Chi·ªÅu
                </label>
                <label style={{ display: "flex", alignItems: "center", gap: 4, fontWeight: 500, color: m.schedule.includes("t·ªëi") ? "#1E90FF" : "#555" }}>
                  <input
                    type="checkbox"
                    name="schedule"
                    value="t·ªëi"
                    checked={m.schedule.includes("t·ªëi")}
                    onChange={e => handleScheduleChange(idx, "t·ªëi", e.target.checked)}
                    style={{ accentColor: "#1E90FF" }}
                  />
                  T·ªëi
                </label>
              </div>
              {medicines.length > 1 && (
                <button type="button" onClick={() => handleRemoveMedicine(idx)} style={{ background: "none", border: "none", color: "#ff4d4f", fontSize: 20, cursor: "pointer", marginLeft: 2 }} title="X√≥a d√≤ng">√ó</button>
              )}
            </div>
          ))}
          <button type="button" onClick={handleAddMedicine} style={{ color: "#1E90FF", background: "none", border: "none", fontWeight: 600, fontSize: 15, cursor: "pointer", marginTop: 4 }}>
            + Th√™m thu·ªëc
          </button>
        </div>

        {/* Ghi ch√∫ chung */}
        <div style={{ marginBottom: 24 }}>
          <label style={{ fontWeight: 600, fontSize: 13, color: "#1E90FF", marginBottom: 4, display: "block" }}>Ghi ch√∫ chung</label>
          <input
            type="text"
            name="note"
            value={note}
            onChange={e => setNote(e.target.value)}
            placeholder="V√≠ d·ª•: Gi·ªù u·ªëng sau ƒÉn 30 ph√∫t, l∆∞u √Ω ƒë·∫∑c bi·ªát..."
            required
            style={{
              width: "100%",
              padding: "10px 14px",
              borderRadius: "8px",
              border: "1.5px solid #e3eafc",
              fontSize: "15px",
              marginTop: 2,
              background: "#fafdff",
              transition: "border 0.2s",
              outline: "none"
            }}
            onFocus={e => e.target.style.border = '1.5px solid #1E90FF'}
            onBlur={e => e.target.style.border = '1.5px solid #e3eafc'}
          />
        </div>
        <div style={{ display: "flex", justifyContent: "space-between", gap: "12px" }}>
          <button
            type="submit"
            disabled={loading || students.length === 0 || !selectedStudentId}
            style={{
              background: students.length === 0 || !selectedStudentId 
                ? "#ccc" 
                : "linear-gradient(90deg,#1E90FF 60%,#6ec1e4 100%)",
              color: "white",
              border: "none",
              padding: "12px 0",
              borderRadius: "999px",
              cursor: (loading || students.length === 0 || !selectedStudentId) ? "not-allowed" : "pointer",
              fontWeight: "700",
              fontSize: "17px",
              flex: 1,
              boxShadow: "0 2px 8px rgba(30,144,255,0.10)",
              transition: "background 0.2s, box-shadow 0.2s",
              opacity: (loading || students.length === 0 || !selectedStudentId) ? 0.6 : 1
            }}
            onMouseOver={e => { 
              if (!loading && students.length > 0 && selectedStudentId) { 
                e.target.style.background = 'linear-gradient(90deg,#1877d2 60%,#4fa3d1 100%)'; 
                e.target.style.boxShadow = '0 4px 16px rgba(30,144,255,0.18)'; 
              }
            }}
            onMouseOut={e => { 
              if (!loading && students.length > 0 && selectedStudentId) { 
                e.target.style.background = 'linear-gradient(90deg,#1E90FF 60%,#6ec1e4 100%)'; 
                e.target.style.boxShadow = '0 2px 8px rgba(30,144,255,0.10)'; 
              }
            }}
          >
            <span style={{ fontSize: 18, marginRight: 6 }}>üì§</span>
            {loading ? 'ƒêang g·ª≠i...' : students.length === 0 ? 'Kh√¥ng c√≥ h·ªçc sinh' : !selectedStudentId ? 'Ch·ªçn h·ªçc sinh' : 'G·ª≠i ƒë∆°n thu·ªëc'}
          </button>
          <button
            type="button"
            onClick={onBack}
            style={{
              background: "#f3f4f8",
              color: "#1E90FF",
              border: "1.5px solid #e3eafc",
              padding: "12px 0",
              borderRadius: "999px",
              cursor: "pointer",
              fontWeight: "700",
              fontSize: "17px",
              flex: 1,
              boxShadow: "0 2px 8px rgba(30,144,255,0.04)",
              marginLeft: 0
            }}
          >
            Quay l·∫°i
          </button>
        </div>
      </form>
    </div>
  );
}

export default DangKyThuocForm;
