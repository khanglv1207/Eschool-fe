import React, { useState, useEffect } from 'react';
import { FaBell, FaCheck, FaTimes, FaClock, FaSyringe, FaUser } from 'react-icons/fa';
import { getVaccineNotifications, confirmVaccine, rejectVaccine } from '../services/vaccinationApi';
import './VaccinationNotification.css';

const VaccinationNotification = () => {
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState('');

  useEffect(() => {
    loadNotifications();
  }, []);

  const loadNotifications = async () => {
    try {
      setLoading(true);
      const data = await getVaccineNotifications();
      setNotifications(data);
      console.log('üìã Th√¥ng b√°o ti√™m ch·ªßng:', data);
    } catch (error) {
      console.error('‚ùå L·ªói t·∫£i th√¥ng b√°o:', error);
      setMessage('‚ùå ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleConfirm = async (notificationId, studentId) => {
    try {
      setMessage('');
      await confirmVaccine(notificationId, 'Ph·ª• huynh ƒë√£ ƒë·ªìng √Ω ti√™m vaccine');
      setMessage('‚úÖ ƒê√£ x√°c nh·∫≠n ti√™m ch·ªßng th√†nh c√¥ng!');
      loadNotifications(); // Reload danh s√°ch
    } catch (error) {
      setMessage('‚ùå ' + error.message);
    }
  };

  const handleReject = async (notificationId, studentId) => {
    try {
      setMessage('');
      await rejectVaccine(notificationId, 'Ph·ª• huynh ƒë√£ t·ª´ ch·ªëi ti√™m vaccine');
      setMessage('‚ùå ƒê√£ t·ª´ ch·ªëi ti√™m ch·ªßng!');
      loadNotifications(); // Reload danh s√°ch
    } catch (error) {
      setMessage('‚ùå ' + error.message);
    }
  };

  if (loading) {
    return (
      <div className="notification-loading">
        <div className="loading-spinner"></div>
        <p>ƒêang t·∫£i th√¥ng b√°o...</p>
      </div>
    );
  }

  if (notifications.length === 0) {
    return (
      <div className="notification-empty">
        <FaBell className="empty-icon" />
        <h3>Kh√¥ng c√≥ th√¥ng b√°o ti√™m ch·ªßng</h3>
        <p>Hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng b√°o ti√™m ch·ªßng n√†o cho con em c·ªßa b·∫°n.</p>
      </div>
    );
  }

  return (
    <div className="vaccination-notification">
      {message && (
        <div className={`message ${message.includes('‚úÖ') ? 'success' : 'error'}`}>
          {message}
        </div>
      )}

      <div className="notification-header">
        <h2>
          <FaBell className="header-icon" />
          Th√¥ng B√°o Ti√™m Ch·ªßng
        </h2>
        <button onClick={loadNotifications} className="refresh-btn">
          <FaClock /> L√†m m·ªõi
        </button>
      </div>

      <div className="notifications-list">
        {notifications.map((notification) => (
          <div key={notification.id} className="notification-card">
            <div className="notification-header-card">
              <div className="notification-icon">
                <FaSyringe />
              </div>
              <div className="notification-info">
                <h3>{notification.vaccineName}</h3>
                <p className="student-info">
                  <FaUser /> {notification.studentName} - {notification.className}
                </p>
                <p className="notification-date">
                  <FaClock /> Ng√†y ti√™m: {new Date(notification.vaccinationDate).toLocaleDateString('vi-VN')}
                </p>
              </div>
              <div className={`status-badge ${notification.status.toLowerCase()}`}>
                {notification.status === 'PENDING' && 'Ch·ªù x√°c nh·∫≠n'}
                {notification.status === 'CONFIRMED' && 'ƒê√£ x√°c nh·∫≠n'}
                {notification.status === 'REJECTED' && 'ƒê√£ t·ª´ ch·ªëi'}
              </div>
            </div>

            {notification.status === 'PENDING' && (
              <div className="notification-actions">
                <button
                  onClick={() => handleConfirm(notification.id, notification.studentId)}
                  className="btn-confirm"
                >
                  <FaCheck /> ƒê·ªìng √Ω
                </button>
                <button
                  onClick={() => handleReject(notification.id, notification.studentId)}
                  className="btn-reject"
                >
                  <FaTimes /> T·ª´ ch·ªëi
                </button>
              </div>
            )}

            {notification.note && (
              <div className="notification-note">
                <strong>Ghi ch√∫:</strong> {notification.note}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default VaccinationNotification; 